// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  passwordHash  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  rounds        Round[]
  friends       Friendship[] @relation("UserFriends")
  friendOf      Friendship[] @relation("FriendUsers")
  userGroups    UserGroup[]
  achievements  UserAchievement[]
  goals         Goal[]
  notes         RoundNote[]
  activities    Activity[]
  challengeParticipants ChallengeParticipant[]
  courseLeaderboards CourseLeaderboard[]
}

model Course {
  id        String   @id @default(cuid())
  name      String   @unique
  location  String?
  description String?
  addressUrl  String?
  holes     Int
  estimatedLengthMeters Int?
  latitude Float?
  longitude Float?
  difficulty String?
  holePars  CourseHole[]
  createdAt DateTime @default(now())
  rounds    Round[]
  leaderboards CourseLeaderboard[]
}

model Round {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  startedAt DateTime @default(now())
  completed Boolean  @default(false)
  totalStrokes Int?
  rating       Int?
  roundType    RoundType @default(CASUAL)
  weather      Weather?
  notes        String?
  shared       Boolean @default(false)
  groupRoundId String?
  groupRound   GroupRound? @relation(fields: [groupRoundId], references: [id])
  scores    Score[]
  roundNotes RoundNote[]
}

model Score {
  id       String @id @default(cuid())
  round    Round  @relation(fields: [roundId], references: [id])
  roundId  String
  hole     Int
  strokes  Int
}

model CourseHole {
  id        String  @id @default(cuid())
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String
  hole      Int
  par       Int
  distanceMeters Int?

  @@unique([courseId, hole])
}

model Friendship {
  id        String  @id @default(cuid())
  requester User    @relation("UserFriends", fields: [requesterId], references: [id])
  requesterId String
  addressee  User    @relation("FriendUsers", fields: [addresseeId], references: [id])
  addresseeId String
  createdAt  DateTime @default(now())
  status     FriendshipStatus @default(PENDING)
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum RoundType {
  CASUAL
  PRACTICE
  TOURNAMENT
  COMPETITIVE
}

model Weather {
  id        String @id @default(cuid())
  round     Round  @relation(fields: [roundId], references: [id])
  roundId   String @unique
  temperature Float?
  windSpeed   Float?
  windDirection String?
  conditions   String?
  humidity     Float?
  pressure     Float?
}

model GroupRound {
  id        String @id @default(cuid())
  name      String?
  createdBy String
  createdAt DateTime @default(now())
  rounds    Round[]
}

model UserGroup {
  id        String @id @default(cuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  group     Group  @relation(fields: [groupId], references: [id])
  groupId   String
  joinedAt  DateTime @default(now())
  role      GroupRole @default(MEMBER)
}

model Group {
  id          String @id @default(cuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime @default(now())
  members     UserGroup[]
  challenges  Challenge[]
}

enum GroupRole {
  ADMIN
  MEMBER
}

model Challenge {
  id          String @id @default(cuid())
  group       Group  @relation(fields: [groupId], references: [id])
  groupId     String
  name        String
  description String?
  type        ChallengeType
  startDate   DateTime
  endDate     DateTime
  target      String?
  createdAt   DateTime @default(now())
  participants ChallengeParticipant[]
}

enum ChallengeType {
  WEEKLY
  MONTHLY
  CUSTOM
}

model ChallengeParticipant {
  id          String @id @default(cuid())
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String
  user        User @relation(fields: [userId], references: [id])
  userId      String
  score       Int?
  completed   Boolean @default(false)
}

model Achievement {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String?
  category    String
  criteria    String
  points      Int
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String @id @default(cuid())
  user          User @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  earnedAt      DateTime @default(now())
}

model Goal {
  id          String @id @default(cuid())
  user        User @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String?
  type        GoalType
  target      Float
  current     Float @default(0)
  deadline    DateTime?
  completed   Boolean @default(false)
  createdAt   DateTime @default(now())
}

enum GoalType {
  SCORE_IMPROVEMENT
  ROUNDS_PLAYED
  COURSES_PLAYED
  DISTANCE_THROWN
  PUTTING_ACCURACY
  CUSTOM
}

model CourseLeaderboard {
  id        String @id @default(cuid())
  course    Course @relation(fields: [courseId], references: [id])
  courseId  String
  user      User @relation(fields: [userId], references: [id])
  userId    String
  bestScore Int
  roundCount Int
  averageScore Float
  lastPlayed DateTime
  updatedAt DateTime @updatedAt
}

model RoundNote {
  id        String @id @default(cuid())
  round     Round @relation(fields: [roundId], references: [id])
  roundId   String
  user      User @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime @default(now())
}

model Activity {
  id        String @id @default(cuid())
  user      User @relation(fields: [userId], references: [id])
  userId    String
  type      ActivityType
  title     String
  description String?
  data      String? // JSON data for activity
  createdAt DateTime @default(now())
}

enum ActivityType {
  ROUND_COMPLETED
  ACHIEVEMENT_EARNED
  GOAL_COMPLETED
  FRIEND_ADDED
  CHALLENGE_COMPLETED
  PERSONAL_BEST
}
